#!/usr/bin/env node

var path = require('path')
var fs = require('fs')
var Mapbox = require('@mapbox/mapbox-sdk/services/styles')

var map_views = {}
var sections = []

var ORDER_FILE = path.join(__dirname, '../_data/settings/order.json')
var MAPBOX_FILE = path.join(__dirname, '../_data/settings/mapbox.json')
var SECTION_FILES = path.join(__dirname, '../_data/sections')
var OUTPUT_FILE = path.join(__dirname, '..', '_data', 'data.json')

var ACCESS_TOKEN = require('../mapbox-config.js').accessToken
var client = new Mapbox({ accessToken: ACCESS_TOKEN })

var order = JSON.parse(fs.readFileSync(ORDER_FILE).toString()).order

fs.readFile(MAPBOX_FILE, function (err, data) {
  if (err) throw err
  var mapbox = JSON.parse(data.toString()).mapbox
  getMapboxStyle(mapbox, (err, style) => {
    if (err) throw err
    var allLayers = style.layers.map((layer) => layer.id)
    fs.readdir(SECTION_FILES, function (err, files) {
      if (err) throw err
      files.forEach((filename) => {
        if (!filename.endsWith('.json')) return

        var contents = fs.readFileSync(path.join(SECTION_FILES, filename)).toString()

        // replace '/static/.' urls with / for production use
        contents = contents.replace(/\/static/g, '')

        var section = JSON.parse(contents)

        var id = section.id

        // initialize all layers to 0 at first
        var layers = {}
        allLayers.forEach((layer) => {
          layers[layer] = 0
        })

        // for those identified in cms, make opacity 1
        // TODO: allow custom opacity instead of binary
        section.layerOpacity.map((layer) => {
          layers[layer.value] = 1
        })
        var bounds = [
          section.minLat,
          section.maxLat,
          section.minLon,
          section.maxLon
        ]

        map_views[id] = {
          bounds: bounds,
          layerOpacity: layers,
          pitch: section.pitch,
          bearing: section.bearing
        }

        delete section.bounds
        delete section.layerOpacity
        delete section.pitch
        delete section.bearing
        sections.push(section)
      })

      sections.sort((a, b) => {
        console.log(order.indexOf(a.id), order.indexOf(b.id))
        return order.indexOf(a.id) > order.indexOf(b.id)
      })
      console.log(sections)

      fs.writeFileSync(
        OUTPUT_FILE,
        JSON.stringify({ style: mapbox, sections, map_views }, null, 2)
      )
    })
  })
})


function getMapboxStyle (styleURL, cb) {
  var styleId = path.parse(styleURL).base
  client.getStyle({styleId})
    .send()
    .then((resp) => {
      const style = resp.body
      return cb(null, style)
    })
    .catch(cb)
}
